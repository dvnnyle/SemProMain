// Update the route to handle PATCH requests
USER_API.put('/:id', async (req, res) => {
    const userId = req.params.id;
    const updatedUser = req.body;

    console.log(`Received PUT request for user ID: ${userId}`);

    try {
        // Update user in the database using the updatedUser object
        // Example: Assume there is a function updateUserInDatabase(userId, updatedUser) for database update
        const result = await updateUserInDatabase(userId, updatedUser);

        if (!result) {
            return res.status(HTTPCodes.ClientSideErrorRespons.NotFound).json({ error: 'User not found' });
        }

        return res.status(HTTPCodes.SuccesfullRespons.Ok).json({ message: 'User updated successfully', user: updatedUser });
    } catch (error) {
        console.error('Error updating user:', error);
        return res.status(HTTPCodes.ServerErrorRespons.InternalServerError).json({ error: 'Internal Server Error' });
    }
});





    <div>
        <h2>User Information</h2>
        <p id="displayedUserName"></p>
        Name: <input type="text" id="editNameInput">
        <button id="editNameButton">Edit Name</button>
        <button id="saveNameButton">Save Name</button> <!-- Added the Save Name button -->
    </div>


        const editNameButton = document.getElementById("editNameButton");
        const editNameInput = document.getElementById("editNameInput");
        const saveNameButton = document.getElementById("saveNameButton"); // Added this line




   editNameButton.onclick = function () {
            editName();
        };

        // Add an event listener for the Save Name button
        saveNameButton.onclick = function () {
            editName();
        };

        async function editName() {
            console.log("Edit Name function started");

            const newUserName = editNameInput.value.trim();
            console.log("New User Name:", newUserName);

            if (newUserName !== "") {
                try {
                    const response = await fetch(`/user/${loggedInUser.id}`, {
                        method: "PUT",
                        headers: {
                            "Content-Type": "application/json",
                        },
                        body: JSON.stringify({ name: newUserName }),
                    });

                    console.log("Fetch request completed");

                    if (response.ok) {
                        const result = await response.json();
                        console.log("Name updated successfully:", result.message);

                        // Update the displayed name
                        loggedInUser.name = newUserName;
                        displayedUserName.textContent = "Name: " + newUserName;
                    } else {
                        const error = await response.json();
                        console.error("Name update failed:", error.error);

                        // Display error message to the user
                    }
                } catch (error) {
                    console.error("Error updating name:", error);

                    // Handle unexpected errors
                }
            } else {
                console.warn("New name cannot be empty.");

                // Display a message to the user that the new name cannot be empty
            }
        }